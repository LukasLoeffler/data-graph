import { connect } from 'mqtt';
import { NodeManager } from "../node-manager";

import { BaseNode } from "../base-node";
import chalk from "chalk";



const NODE_TYPE = "MQTT_PUB"

const requiredOptions = ["Server, Topic"];

export class MqttBaseNode extends BaseNode {
    options: any;
    server: string;
    //topic: string;
    client: any;

    constructor(name: string, id: string, options: any, targetsSuccess: any) {
        super(name, NODE_TYPE, id, targetsSuccess, []);
        //this.validateOptions(options);
        this.options = options;
        this.server = 'mqtt://broker.hivemq.com';
        //this.topic = this.getOption("Topic");
        this.createClient();
        NodeManager.addNode(this);
    }


    createClient() {
        this.client = connect(this.server);
        this.client.on('connect', () => {
            console.log(`MQTT ${this.server}: ${chalk.greenBright("connected")}`);
        })
    }


    /**
     * Options are generated by the frontend end therefore a source for errors.
     * This method checks the passed options of the constructor against the requiredOptions of this class.
     * @param options Passed options
     */
    validateOptions(options: any) {
        requiredOptions.forEach(option => {
            let checkedOption = options[option];
            if (!checkedOption) throw new Error(`${chalk.red(NODE_TYPE)}: Option '${option}' is not present`);
        });
    }


    /**
     * Extracts the optionValue for optionName
     * @param options 
     */
    getOption(optionName: string) {
        return this.options[optionName];
    }
}